
*+eig_pswf

       subroutine eig_pswf( c, n, big_N, chi, d_val, s )
C      -------------------------------------------------

C     Returns the eigenvalues for the generalised PSWF.

C     Given:
C         Compactness.
              real        c
C         Eigenvalue and eigenvector to return.
              integer     n
C         Generalised prolated spheroidal order.
              integer     big_N

C     Returned:
C         Specified eigenvalue and eigenvector.
              real*8      chi, d_val(0:*)
C         Status value - must be zero on entry
              integer     s
C
C     Calulates the dNj eigenvector for the optimal grading problem by
C     solving the matrix generated by the recursion relationship -
C     (Eqn. 41 in Slepian (1964) Bell System Tech. J. 43, pp 3009-3057.)
C
C     Uses the NAGLIB routine F02AGF to solve a general real unsymmetric
C     eigenproblem matrix.
C
C     NPR     September 1988
C     DJT     April 2009, use F02EBF instead
*-

C     Function declarations:
C         Coefficients of the recursion relationship
              real*8          gam_p1, gam_0, gam_m1

C     Global constants
             include    '/mrao/include/maplib_grading.inc'

C     Local variables.
C         Loop counters
              integer         i, j
C         NAGLIB status value
              integer         ifail
C         Input parameter c squared.
              real*8          c_sqr
C         Eigenproblem matrix.
              real*8          a( 0:order, 0:order )
C         Real and complex parts of eigenvalues
              real*8          chi_r(0:order), chi_i(0:order)
C         Real and complex parts of eigenvectors
              real*8          d_r(0:order,0:order),d_i(0:order,0:order)
C         Workspace for F02EBF
              integer         lwork
              parameter      (lwork = 4*order)
              real*8          work(lwork)
C         Number of iterations required to obtain each eigenvalue
              integer         indx(0:order)
C         Modulii of the eigenvalues
              real            mod_chi(0:order)

C     Fill array - NAGLIB wants it column ordered, not row ordered.
      c_sqr = c*c
      do 200, i = 0, order
          do 100, j = 0, order
              if (j.eq.(i-1)) then
                  a(i,j) = gam_p1( big_N, j )*c_sqr
              else if (j.eq.i) then
                  a(i,j) = gam_0(  big_N, j )*c_sqr +
     *                         (2*j+big_N+0.5D+0) * (2*j+big_N+1.5D+0)
              else if (j.eq.(i+1)) then
                  a(i,j) = gam_m1( big_N, j )*c_sqr
              else
                  a(i,j) = 0.0D+0
              end if
  100     continue
  200 continue

C     Solve matrix
      ifail = 1
c     call F02AGF( a, (order+1), (order+1),
c    *             chi_r, chi_i,
c    *             d_r, (order+1), d_i, (order+1),
c    *             indx, ifail             )
      call F02EBF( 'V', (order+1), a, (order+1),
     *             chi_r, chi_i,
     *             d_r, (order+1), d_i, (order+1),
     *             work, lwork, ifail      )

      if (ifail.ne.0) then
          s = ERR_NAGLIB
      else
C         Sort the eigenvalues
          do 300, i = 0, order
              mod_chi(i) = chi_r(i)*chi_r(i)+chi_i(i)*chi_i(i)
  300     continue
          call util_qindxr(mod_chi, indx, (order+1) )

          if (chi_i(indx(n)-1).ne.0) then
              s = ILL_EIGENVALUE
          else
C             Return the eigenvalue and eigenvector
              chi   = chi_r(indx(n)-1)

              do 400, i = 0, order
                  d_val(i) = d_r(i,indx(n)-1)
  400         continue
          end if
      end if

      if (s.ne.0) goto 9999
      return

 9999 call maperr( s, 'in routine EIG_PSWF' )
      return
      end
